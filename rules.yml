---
rules:
  - code: FC001
    name: Use strings in preference to symbols to access node attributes
    tags:
      - style
      - attributes
    summary: |
      Use strings rather than symbols when referencing node attributes. This
      warning will be shown if you reference a node attribute using symbols.
    examples:
      - title: Symbols in node attributes.
        text: This example would match the FC001 rule because `node[:cookbook][:package]` accesses node attributes with symbols
        code: |
          # Don't do this
          package node[:cookbook][:package] do
            action :install
          end
      - title: Modified version
        text: 'This modified example would not match the FC001 rule:'
        code: |
          package node['cookbook']['package'] do
            action :install
          end

  - code: FC002
    name: Avoid string interpolation where not required
    tags:
      - style
      - strings
    summary: |
      When you declare a resource in your recipes you frequently want to
      reference dynamic values such as node attributes. This warning will be
      shown if you are unnecessarily wrapping an attribute reference in a
      string.
    examples:
      - title: Unnecessary string interpolation
        text: This example would match the FC002 rule because the `version` attribute has been unnecessarily quoted.
        code: |
          # Don't do this
          package 'mysql-server' do
            version "#{node['mysql']['version']}"
            action :install
          end
      - title: Modified version
        text: 'This modified example would not match the FC002 rule:'
        code: |
          # Do this instead
          package 'mysql-server' do
            version node['mysql']['version']
            action :install
          end
  - code: FC003
    name: Check whether you are running with chef server before using server-specific features
    summary: |
      This rule has been deprecated. Chef 12.11 switched Chef Solo to use Chef
      Local mode which eliminates the need to avoid server specific Chef
      functionality in recipes. With that change this rule became obsolete.
    deprecated: true
  - code: FC004
    name: Use a service resource to start and stop services
    tags:
      - portability
      - services
    summary: |
      This warning is shown if you are starting or stopping a service using the
      Chef `execute` resource rather than the more idiomatic `service` resource.
      You can read more about the service resource here:

      * [https://docs.chef.io/resource_service.html](https://docs.chef.io/resource_service.html)
    examples:
      - title: Uses execute to control a service
        text: |
          This example would match the FC004 rule because it uses `execute` for
          service control. There is no reason to use execute because the service
          resource exposes the `start_command` attribute to give you full
          control over the command issued.
        code: |
          # Don't do this
          execute 'start-tomcat' do
            command '/etc/init.d/tomcat6 start'
            action :run
          end
      - title: Modified version
        text: 'This modified example would not match the FC004 rule:'
        code: |
          # Do this instead
          service 'tomcat' do
            action :start
          end
  - code: FC005
    name: Avoid repetition of resource declarations
    tags:
      - style
    summary: |
      When writing Chef recipes you have the full power of Ruby at your
      disposal. One of the cases where this is helpful is where you need to
      declare a large number of resources that only differ in a single attribute
      - the canonical example is installing a long list of packages.
    examples:
      - title: Unnecessarily repetitive
        text: |
          This example matches the FC005 rule because all the resources of type
          `package` differ only in a single attribute - the name of the package
          to be upgraded. This rule is very simple and looks only for resources
          that all differ in only a single attribute. For example - if only one
          of the packages specified the version then this rule would not match.
        code: |
          # You could do this
          package 'erlang-base' do
            action :upgrade
          end
          package 'erlang-corba' do
            action :upgrade
          end
          package 'erlang-crypto' do
            action :upgrade
          end
          package 'rabbitmq-server' do
            action :upgrade
          end
      - title: Modified version
        text: |
          This modified example would not match the FC005 rule. It takes
          advantage of the fact that Chef processes recipes in two distinct
          phases. In the first 'compile' phase it builds the resource
          collection. In the second phase it configures the node against the
          resource collection.

          Don't worry about changing your recipe if it already does what you
          want - the amount of Ruby syntactic sugar to apply is very much a
          matter of personal taste. Note that this rule also isn't clever enough
          yet to detect if your resources are wrapped in a control structure and
          not suitable for 'rolling up' into a loop.
        code: |
          # It's shorter to do this
          %w{erlang-base erlang-corba erlang-crypto rabbitmq-server}.each do |pkg|
            package pkg do
              action :upgrade
            end
          end
  - code: FC006
    name: Mode should be quoted or fully specified when setting file permissions
    tags:
      - correctness
      - files
    summary: |
      When setting file or directory permissions via the mode attribute you
      should either quote the octal number or ensure it is specified to five
      digits. Otherwise the permissions that are set after Ruby coerces the
      number may not match what you expect.
    examples:
      - title: File mode won't be interpreted correctly
        code: |
          # Don't do this
          directory '/var/lib/foo' do
            owner 'root'
            group 'root'
            mode 644
            action :create
          end
      - title: Modified versions
        text: 'These modified examples would not match the FC006 rule:'
        code: |
          # This is ok
          directory '/var/lib/foo' do
            owner 'root'
            group 'root'
            mode '644'
            action :create
          end

          # And so is this
          directory '/var/lib/foo' do
            owner 'root'
            group 'root'
            mode 00644
            action :create
          end
  - code: FC007
    name: Ensure recipe dependencies are reflected in cookbook metadata
    tags:
      - correctness
      - metadata
    summary: |
      This warning is shown when you include a recipe that is not in the current
      cookbook and not defined as a dependency in your cookbook metadata. This
      is potentially a big problem because things will blow up if the necessary
      dependency cannot be found when Chef tries to converge your node. For more
      information refer to the Chef metadata page:

      * [https://docs.chef.io/config_rb_metadata.html](https://docs.chef.io/config_rb_metadata.html)

      The fix is to declare the cookbook of the recipe you are including as a
      dependency in your `metadata.rb` file.

      You may also see this warning if foodcritic has not been able to infer the
      name of your cookbook correctly when the cookbook directory does not match
      the name of the cookbook specified in the include.
    examples:
      - title: Example dependency on another cookbook
        text: |
          Assuming you have a recipe that had the following line:
        code: |
          include_recipe 'apache2::default'
      - title: Adding metadata dependency for Chef
        text: |
          Then to remove this warning you would add the `apache2` cookbook as a
          dependency to your own cookbook metadata in the `metadata.rb` file at
          the root of your cookbook.
        code: |
          depends 'apache2'
  - code: FC008
    name: Generated cookbook metadata needs updating
    tags:
      - metadata
      - supermarket
    summary: |
      This warning is shown if you used `knife cookbook create` to create a new
      cookbook and didn't override the maintainer and maintainer email. You need
      to set these to real values in `metadata.rb` or run knife again with the
      real values.

      * [https://docs.chef.io/knife_cookbook.html#create](https://docs.chef.io/knife_cookbook.html#create)
    examples:
      - title: Maintainer metadata is boilerplate default
        code: |
          # Don't do this
          maintainer 'YOUR_COMPANY_NAME'
          maintainer_email 'YOUR_EMAIL'
          license 'All rights reserved'
          description 'Installs/Configures example'
          long_description IO.read(File.join(File.dirname(__FILE__), 'README.md'))
          version '0.0.1'
      - title: Modified version
        text: 'This modified example would not match the FC008 rule:'
        code: |
          # Do this instead
          maintainer 'Example Ltd'
          maintainer_email 'postmaster@example.com'
          license 'All rights reserved'
          description 'Installs/Configures example'
          long_description IO.read(File.join(File.dirname(__FILE__), 'README.md'))
          version '0.0.1'
  - code: FC009
    name: Resource attribute not recognised
    tags:
      - correctness
    summary: |
        This warning is likely to mean that your recipe will fail to run when
        you attempt to converge. Your recipe may be syntactically valid Ruby,
        but the attribute you have attempted to set on a built-in Chef resource
        is not recognised. This is commonly a typo or you need to check the
        documentation to see what the attribute you are trying to set is called:

          * [https://docs.chef.io/resource.html#resources](https://docs.chef.io/resource.html#resources)
    examples:
      - title: Resource with an unrecognised attribute
        text: |
          This example matches the FC009 rule because `punter` is not a
          recognised attribute for the file resource.
        code: |
          # Don't do this
          file '/tmp/something' do
            punter 'root'
            group 'root'
            mode '0755'
            action :create
          end
      - title: Modified version
        text: |
          Checking the documentation we can see the correct attribute is
          `owner`.
        code: |
          # Do this instead
          file '/tmp/something' do
            owner 'root'
            group 'root'
            mode '0755'
            action :create
          end
  - code: FC010
    name: Invalid search syntax
    tags:
      - correctness
      - search
    summary: |
      The search syntax used is not recognised as valid Lucene search criteria.
      This is commonly because you have made a typo or are not escaping special
      characters in the query syntax.

      * [https://docs.chef.io/chef_search.html#query-syntax](https://docs.chef.io/chef_search.html#query-syntax)

      Note that this rule will not identify syntax errors in searches composed
      of subexpressions. It checks only for literal search strings.
    examples:
      - title: Unescaped search syntax
        text: |
          This example matches the FC010 rule because search metacharacters -
          in this case the square brackets - have not been properly escaped.
        code: |
          # Don't do this
          search(:node, 'run_list:recipe[foo::bar]') do |matching_node|
            puts matching_node.to_s
          end
      - title: Modified version
        text: |
          With the characters escaped this will no longer match the rule.
        code: |
          # Do this instead
          search(:node, 'run_list:recipe\[foo\:\:bar\]') do |matching_node|
            puts matching_node.to_s
          end
  - code: FC011
    name: Missing README in markdown format
    tags:
      - readme
      - supermarket
    summary: |
      [Supermarket](https://supermarket.chef.io/) will now
      render your cookbook README documentation inline - [see this example for
      the mysql cookbook](https://supermarket.chef.io/cookbooks/mysql).

      Your README needs to be in
      [Markdown format](https://daringfireball.net/projects/markdown/syntax) for
      this to work. This rule will match any cookbook that does not have a
      `README.md` file in the root directory.
  - code: FC012
    name: Use Markdown for README rather than RDoc
    tags:
      - supermarket
      - readme
    summary: |
      Writing cookbook documentation in RDoc has been deprecated in favour of
      [Markdown format](https://daringfireball.net/projects/markdown/syntax).
      This rule will match any cookbook that has a `README.rdoc` file in the
      root directory.
  - code: FC013
    name: Use file_cache_path rather than hard-coding tmp paths
    tags:
      - portability
      - files
    summary: |
      This warning means that you have hard-coded a file download path in your
      cookbook to a temporary directory. This can be a problem on boxes built
      with a small `/tmp` mount point. Chef has its own configuration option
      `file_cache_path` you should use instead:

      * [https://docs.chef.io/config_rb_client.html](https://docs.chef.io/config_rb_client.html)
    examples:
      - title: Downloading to a hard-coded temp directory
        text: |
          This example matches the FC013 rule because it hard-codes the download
          path to `/tmp`.
        code: |
          # Don't do this
          remote_file '/tmp/large-file.tar.gz' do
            source 'http://www.example.org/large-file.tar.gz'
          end
      - title: Modified version
        text: 'To remove this warning use the configured `file_cache_path`:'
        code: |
          # Do this instead
          remote_file "#{Chef::Config[:file_cache_path]}/large-file.tar.gz" do
            source 'http://www.example.org/large-file.tar.gz'
          end
  - code: FC014
    name: Consider extracting long ruby_block to library
    tags:
      - style
      - libraries
    summary: |
      Your cookbook has a fairly long `ruby_block` resource. Long `ruby_block`
      resources are often candidates for extraction to a separate module or
      class under the `libraries` directory.

      * [https://docs.chef.io/libraries.html](https://docs.chef.io/libraries.html)
  - code: FC015
    name: Consider converting definition to a Custom Resource
    tags:
      - style
      - definitions
    summary: |
      Chef definitions are an older approach to creating a higher-level
      abstraction for a group of resources. Unlike Custom Resources they are not
      first class resources, cannot receive notifications, and do not support why-run
      mode. You should prefer Custom Resources for new development.

      * [https://docs.chef.io/custom_resources.html](https://docs.chef.io/custom_resources.html)
  - code: FC016
    name: LWRP does not declare a default action
    tags:
      - correctness
      - lwrp
    summary: |
      This warning means that the LWRP does not declare a default action. You
      should normally define a default action on your resource to avoid
      confusing users. Most resources have an intuitive default action.
    examples:
      - title: Resource without a default action
        text: |
          This example matches the FC016 rule because it does not declare a
          default action.
        code: |
          # Don't do this
          actions :create, :delete
      - title: Modified version
        text: |
          With a default action specified this warning will no longer be
          displayed.
        code: |
          # Do this instead
          actions :create, :delete
          default_action :create

  - code: FC017
    name: LWRP does not notify when updated
    tags:
      - correctness
      - lwrp
    summary: |
      This warning means that the LWRP will not currently trigger
      [notifications](https://docs.chef.io/chef/resources.html#notifications)
      to other resources. This can be a source of difficult to track down bugs.

      There are two ways of marking that the resource state has changed:

      * Surround the action in a `converge_by` block. This is done when
        [implementing Why-Run support](http://dougireton.com/blog/2013/01/07/creating-an-lwrp-part-2/)
        and will also ensure notifications are sent.
      * Add `use_inline_resources` to the top of the provider file. This means
        that the resources you define in your action are run in their own
        [self-contained Chef run](https://docs.chef.io/lwrp_common_inline_compile.html)
        and your provider will send notifications if any of the nested resources
        in your actions are updated. This approach is available from Chef 11 and is
        the default behavior in Chef 13.
    examples:
      - title: Provider that does not send notifications
        text: |
          This example matches the FC017 rule because it does not mark that its
          state has changed and will therefore not send notifications.
        code: |
          # Don't do this
          action :create do
            # create action implementation
          end
      - title: Modified version
        text: |
          Any of the three approaches shown below will ensure that
          notifications are sent correctly.
        code: |
          # Approach 1: Using converge_by
          action :create do
            converge_by("Creating my_resource #{new_resource.name}") do
              # create action implementation
            end
          end

          # Approach 2: Using use_inline_resources
          use_inline_resources
          action :create do
            # create action implementation
          end
  - code: FC018
    name: LWRP uses deprecated notification syntax
    tags:
      - correctness
      - lwrp
      - deprecated
    examples:
      - title: Provider uses deprecated syntax
        text: |
          This example matches the FC018 rule because it uses the old syntax for
          indicating it has been updated.
        code: |
          # Don't do this
          action :create do
            # create action implementation

            # My state has changed so I'd better notify observers, but I'm using
            # a deprecated syntax
            new_resource.updated = true
          end

          # Also don't do this
          action :create do
            # create action implementation

            # My state has changed so I'd better notify observers, but I'm using
            # a deprecated syntax
            @updated = true
          end
      - title: Modified version
        text: |
          This example uses the newer syntax and will not raise the warning.
        code: |
          # Approach 1: Using converge_by
          action :create do
            converge_by("Creating my_resource #{new_resource.name}") do
              # create action implementation
            end
          end

          # Approach 2: Using use_inline_resources
          use_inline_resources
          action :create do
            # create action implementation
          end
  - code: FC019
    name: Access node attributes in a consistent manner
    tags:
      - style
      - attributes
    summary: |
      Node attributes can be accessed in multiple ways in Chef. This warning is
      shown when a cookbook is not consistent in the approach it uses to access
      attributes. It is not displayed for variations between cookbooks.
    examples:
      - title: Recipe mixes symbols and strings for accessing node attributes
        code: |
          # Don't do this
          node[:apache][:dir] = '/etc/apache2'

          directory node['apache']['dir'] do
            owner 'apache'
            group 'apache'
            action :create
          end
      - title: Modified version
        code: |
          # Do this instead
          node['apache']['dir'] = '/etc/apache2'

          directory node['apache']['dir'] do
            owner 'apache'
            group 'apache'
            action :create
          end
  - code: FC020
    name: Conditional execution string attribute looks like Ruby
    summary: |
      This rule has been deprecated due to the frequency of false positives.
      See the discussion against
      [issue #30](https://github.com/foodcritic/foodcritic/issues/30) for more
      detail.
    deprecated: true
  - code: FC021
    name: Resource condition in provider may not behave as expected
    tags:
      - correctness
      - lwrp
    summary: |
      A change introduced in Chef 0.10.6 means that conditions may not work as
      expected for resources redeclared with the same name. If your LWRP defines
      a resource and that resource:

      * Has an [associated guard](https://docs.chef.io/resource_common.html#guards)
        which references a resource attribute. AND
      * The resource has a fixed name.

      Then you will likely find that only the first resource will be applied. See this ticket for more background:

      * [http://tickets.chef.io/browse/CHEF-2812](http://tickets.chef.io/browse/CHEF-2812)
    examples:
      - title: Resource condition will be evaluated only once
        text: |
          Because the `feed_pet` resource will have the same name across all
          instances of your LWRP, the condition will only be checked for the
          first resource.
        code: |
          # Don't do this
          action :feed do
            execute 'feed_pet' do
              command "echo 'Feeding: #{new_resource.name}'; touch '/tmp/#{new_resource.name}'"
              not_if { ::File.exists?("/tmp/#{new_resource.name}")}
            end
          end
      - title: Modified version
        text: |
          By making the resource name change for each unique instance of our
          LWRP instance we avoid this behaviour.
        code: |
          # Do this instead
          action :feed do
            execute "feed_pet_#{new_resource.name}" do
              command "echo 'Feeding: #{new_resource.name}'; touch '/tmp/#{new_resource.name}'"
              not_if { ::File.exists?("/tmp/#{new_resource.name}")}
            end
          end
  - code: FC022
    name: Resource condition within loop may not behave as expected
    tags:
      - correctness
    summary: |
      A change introduced in Chef 0.10.6 means that conditions may not work as
      expected for resources declared within a loop. If your recipe defines a
      resource and that resource:

      * Has an [associated condition](https://docs.chef.io/resource_common.html#guards)
        which references a block variable. AND
      * The resource has a fixed name.

      Then you will likely find that only the first resource will be applied. See this ticket for more background:

      * [http://tickets.chef.io/browse/CHEF-2812](http://tickets.chef.io/browse/CHEF-2812)
    examples:
      - title: Resource condition will be evaluated only once
        text: |
          Because the feed_pet resource will have the same name for every
          iteration of the loop, the condition will only be checked for the
          first resource.
        code: |
          # Don't do this
          %w{rover fido}.each do |pet_name|
            execute 'feed_pet' do
              command "echo 'Feeding: #{pet_name}'; touch '/tmp/#{pet_name}'"
              not_if { ::File.exists?("/tmp/#{pet_name}")}
            end
          end
      - title: Modified version
        text: |
          By making the resource name change for each iteration of the loop we avoid this behaviour.
        code: |
          # Do this instead
          %w{rover fido}.each do |pet_name|
            execute "feed_pet_#{pet_name}" do
              command "echo 'Feeding: #{pet_name}'; touch '/tmp/#{pet_name}'"
              not_if { ::File.exists?("/tmp/#{pet_name}")}
            end
          end
  - code: FC023
    name: Prefer conditional attributes
    summary: |
      This rule has been deprecated. While it's often considered a more chef like
      coding style to use not_if and only_if within the resources, there are several
      downsides to this including the inclusion of the resources within resource collection
      and reporting.
    deprecated: true
  - code: FC024
    name: Consider adding platform equivalents
    tags:
      - portability
    summary: |
      This warning is shown when:

      * you have a conditional statement in your cookbook based on the platform
        of the node
      * and at least two platforms are included as equivalent in your
        conditional
      * and the conditional does not include a platform known to belong to the
        same family

      If at all possible you should consider using `platform_family` instead of
      platform to ensure you support similar distros. Otherwise for the greatest
      portability consider adding the missing platforms to your conditional.
    examples:
      - title: Case statement has a subset of platform flavours
        text: |
          This example matches the FC024 rule because it includes a `case`
          statement that matches more than one flavour of a platform family
          but omits other popular flavours from the same family.
        code: |
          # The RHEL platforms branch below omits popular distributions
          case node[:platform]
            when 'debian', 'ubuntu'
              package 'foo' do
                action :install
              end
            when 'centos', 'redhat'
              package 'bar' do
                action :install
              end
          end
      - title: Modified version
        text: |
          This warning is no longer raised when the other common equivalent
          RHEL-based distributions have been added to the `when`.
        code: |
          case node[:platform]
            when 'debian', 'ubuntu'
              package 'foo' do
                action :install
              end
            when 'centos', 'redhat', 'scientific', 'oracle'
              package 'bar' do
                action :install
              end
            end
  - code: FC025
    name: Prefer chef_gem to compile-time gem install
    tags:
      - correctness
      - deprecated
    summary: |
      This warning is shown if:
      * you have a cookbook that installs a Rubygem for use from Chef
      * the cookbook uses the
        [compile-time gem install trick](http://www.chef.io/blog/2009/06/01/cool-chef-tricks-install-and-use-rubygems-in-a-chef-run/)
        which is deprecated from Chef 0.10.10 and is replaced by the first class
        `chef_gem` resource.
    examples:
      - title: Manual compile-time installation
        text: |
          This example matches the FC025 rule because it uses the older
          approach for installing a gem so that it is available in the current
          run.
        code: |
          r = gem_package 'mysql' do
            action :nothing
          end

          r.run_action(:install)
          Gem.clear_paths
      - title: Modified version
        text: |
          Use `chef_gem` to install the gem to avoid this warning.
        code: |
          chef_gem 'mysql' do
            compile_time true
          end
  - code: FC026
    name: Conditional execution block attribute contains only string
    tags:
      - correctness
    summary: |
      This warning is shown if you have a conditional attribute declared on a
      resource as a block that contains only a single string.
    examples:
      - title: Conditional attribute returns a string
        text: |
          This example matches the FC026 rule because it returns a string from
          the block. This will always evalute to true, and often indicates that
          you are trying to run a command rather than execute a Ruby block as
          your condition.
        code: |
          # Don't do this
          template '/etc/foo' do
            mode '0644'
            source 'foo.erb'
            not_if { 'test -f /etc/foo' }
          end
      - title: Modified version
        text: |
          If the intention is to run the string as an operating system command
          then remove the block surrounding the command.
        code: |
          # Do this instead
          template '/etc/foo' do
            mode '0644'
            source 'foo.erb'
            not_if 'test -f /etc/foo'
          end
  - code: FC027
    name: Resource sets internal attribute
    tags:
      - correctness
    summary: |
      This warning is shown if you set an attribute on a Chef resource that is
      technically accessible but should not be set in normal usage.
      To avoid this warning allow Chef to set the value of the internal
      attribute rather than setting it yourself.
    examples:
      - title: Service resource sets internal attribute
        text: |
          This example matches the FC027 rule because it sets the `running`
          attribute on a service resource. This attribute should normally be
          set by the provider itself and not in normal recipe usage.
        code: |
          # Don't do this
          service 'foo' do
            running true
          end
      - title: Modified version
        text: |
          In this particular example you can achieve the same effect by using
          the service `:start` action.
        code: |
          # Do this instead
          service 'foo' do
            action :start
          end
  - code: FC028
    name: "Incorrect #platform? usage"
    tags:
      - correctness
    summary: |
      This warning is shown if you attempt to use the `platform?` Chef built-in
      method as `node.platform?`. Because of the way Chef attributes work the
      later approach will not error but will do the wrong thing which may
      result in resources you had intended to apply only to a single platform
      instead being applied to all platforms.
    examples:
      - title: Incorrect attempt to use platform? method
        text: |
          This example matches the FC028 rule because the `platform?` method
          is incorrectly prefixed with `node`.
        code: |
          # Don't do this
          file '/etc/foo' do
            only_if { node.platform?('commodore64') }
          end
      - title: Modified version
        text: |
          Remove the leading `node.` from the use of `platform?` to resolve
          this warning.
        code: |
          # Do this instead
          file '/etc/foo' do
            only_if { platform?('commodore64') }
          end
  - code: FC029
    name: No leading cookbook name in recipe metadata
    tags:
      - correctness
      - metadata
    summary: |
      This warning is shown if you declare a recipe in your cookbook metadata
      without including the cookbook name as a prefix.
    examples:
      - title: Recipe declared without cookbook name prefix
        text: |
          This example matches the FC029 rule because the metadata declares a
          recipe without prefixing it with the name of the current cookbook.
        code: |
          # Don't do this
          name 'example'
          version '1.2.3'
          recipe 'default', 'Installs Example'
      - title: Modified version
        text: |
          This modified example would not match the FC029 rule:
        code: |
          # Do this instead
          name 'example'
          version '1.2.3'
          recipe 'example::default', 'Installs Example'
  - code: FC030
    name: Cookbook contains debugger breakpoints
    tags:
      - correctness
    summary: |
      [Pry is a fantastic tool](http://pryrepl.org/) for interactive
      exploration of a running Ruby program. You can place breakpoints in your
      cookbook code that will launch a Pry console. This warning is shown when
      your cookbook code contains these breakpoints, as failing to remove these
      will cause your Chef run to halt.

      This rule currently only checks for use of `binding.pry` and not the Chef
      built-in `breakpoint` resource which is never used outside of
      [chef-shell](https://docs.chef.io/chef_shell.html).
    examples:
      - title: Recipe includes breakpoint
        text: |
          This example matches the FC030 rule because it includes a Pry
          breakpoint declared with `binding.pry`.
        code: |
          # Don't do this
          template '/etc/foo' do
            source 'foo.erb'
          end
          binding.pry
      - title: Modified version
        text: |
          This modified example would not match the FC030 rule:
        code: |
          # Do this instead
          template '/etc/foo' do
            source 'foo.erb'
          end
  - code: FC031
    name: Cookbook without metadata.rb file
    tags:
      - correctness
      - metadata
    summary: |
      Chef cookbooks normally include a `metadata.rb` file which can be used
      to express a
      [wide range of metadata about a cookbook](https://docs.chef.io/config_rb_metadata.html).
      This warning is shown when a directory appears to contain a cookbook, but
      does not include the expected `metadata.rb` file at the top-level.
  - code: FC032
    name: Invalid notification timing
    tags:
      - correctness
      - notifications
    summary: |
      [Chef notifications](https://docs.chef.io/resource_common.html#notifications)
      allow a resource to define that it should be actioned when another
      resource changes state.

      Notification timing can be controlled and set to `immediate`, or `delayed`
      until the end of the Chef run. This warning is shown when the timing
      specified is not recognised.
    examples:
      - title: Notification timing is invalid
        text: |
          This example matches the FC032 rule because it specifies an invalid
          notification timing.
        code: |
          # Don't do this
          template '/etc/foo' do
            notifies :restart, 'service[foo]', :imediately
          end
      - title: Modified version
        text: |
          This modified example would not match the FC032 rule because the
          mispelt timing has been corrected.
        code: |
          # Do this instead
          template '/etc/foo' do
            notifies :restart, 'service[foo]', :immediate
          end
  - code: FC033
    name: Missing template
    tags:
      - correctness
      - templates
    summary: |
      This warning is shown when the erb template associated with a
      [template resource](https://docs.chef.io/resource_template.html)
      cannot be found.
  - code: FC034
    name: Unused template variables
    tags:
      - correctness
      - templates
    summary: |
      This warning is shown when one or more variables passed into a template
      by a [template resource](https://docs.chef.io/resource_template.html)
      are not then used within the template.

      This is often a sign that a template still contains hard-coded values that
      you intended to parameterise.
    examples:
      - title: Unused template variables
        text: |
          This example matches the FC034 rule because it passes two variables
          to the template, of which only the first is used.
        code: |
          template '/etc/foo/config.conf' do
            source 'config.conf.erb'
            variables(
              'config_var_a' => node['config']['config_var_a'],
              'config_var_b' => node['config']['config_var_b']
            )
          end


          # config.conf.erb
          # var_a=<%= @config_var_a %>
      - title: Modified version
        text: |
          This modified example would not match the FC034 rule becuse the
          template has been updated to include both variables passed through.
        code: |
          template '/etc/foo/config.conf' do
            source 'config.conf.erb'
            variables(
              'config_var_a' => node['config']['config_var_a'],
              'config_var_b' => node['config']['config_var_b']
            )
          end

          # config.conf.erb
          # var_a=<%= @config_var_a %>
          # var_b=<%= @config_var_b %>
  - code: FC035
    name: Template uses node attribute directly
    summary: |
      This rule has been deprecated. See the discussion against
      [issue #60](https://github.com/foodcritic/foodcritic/issues/60) for more
      detail.
    deprecated: true
  - code: FC037
    name: Invalid notification action
    tags:
      - correctness
      - notifications
    summary: |
      This warning is shown when a resource
      [notifies](https://docs.chef.io/resource.html#Resources-Notifications)
      another resource to take an action, but the action is invalid for the
      target resource type.
    examples:
      - title: Invalid notification action
        text: |
          This example matches the FC037 rule because `:activate_turbo_boost` is
          not a valid action for services.
        code: |
          # Don't do this
          template '/etc/foo.conf' do
            notifies :activate_turbo_boost, 'service[foo]'
          end
      - title: Modified version
        text: |
          This modified example would not match the FC037 rule because the
          action has been corrected.
        code: |
          # Do this instead
          template '/etc/foo.conf' do
            notifies :restart, 'service[foo]'
          end
  - code: FC038
    name: Invalid resource action
    tags:
      - correctness
    summary: |
      This warning is shown when a resource action is not valid for the type of
      resource.
    examples:
      - title: Invalid resource action
        text: |
          This example matches the FC038 rule because `:none` is
          not a valid action.
        code: |
          # Don't do this
          service 'foo' do
            action :none
          end
      - title: Modified version
        text: |
          This modified example would not match the FC038 rule because the
          action has been corrected.
        code: |
          # Do this instead
          service 'foo' do
            action :nothing
          end
  - code: FC039
    name: Node method cannot be accessed with key
    tags:
      - correctness
    summary: |
      Chef allows you to use varying syntax to refer to node attributes.
      This warning is shown when you attempt to reference a method on
      `Chef::Node` using the same string or symbol syntax reserved for node
      attributes.
    examples:
      - title: Attempt to access node method as a key
        text: |
          This example matches the FC039 rule because `run_state` is
          only accessible as a method and cannot be referenced as an attribute.
        code: |
          # Don't do this
          node['run_state']['nginx_force_recompile'] = false
      - title: Modified version
        text: |
          This modified example would not match the FC039 rule because the
          `run_state` is referenced as a method.
        code: |
          # Do this instead
          node.run_state['nginx_force_recompile'] = false
  - code: FC040
    name: Execute resource used to run git commands
    tags:
      - style
    summary: |
      This warning is shown if you declare an `execute` resource that uses git.
      If the command you are attempting to execute is supported by the `git`
      resource you should probably use that instead.
    examples:
      - title: Execute resource used to run git command
        text: |
          This example matches the FC040 rule because an `execute` resource is
          used where you could instead use a `git` resource.
        code: |
          # Don't do this
          execute 'git clone https://github.com/git/git.git' do
            action :run
          end
      - title: Modified version
        text: |
          This modified example would not match the FC040 rule because the
          `execute` resource has been replaced by a `git` resource.
        code: |
          # Do this instead
          git '/foo/bar' do
            repository 'git://github.com/git/git.git'
            reference 'master'
            action :sync
          end
  - code: FC041
    name: Execute resource used to run curl or wget commands
    tags:
      - style
      - portability
    summary: |
      This warning is shown if you use an execute resource to run the `curl` or
      `wget` commands. If you are downloading a file consider using the
      `remote_file` resource instead.
    examples:
      - title: Execute resource used to run wget command
        text: |
          This example matches the FC041 rule because an `execute` resource is
          used where you could instead use a `remote_file` resource.
        code: |
          # Don't do this
          execute "cd /tmp && wget 'http://example.org/'" do
            action :run
          end
      - title: Modified version
        text: |
          This modified example would not match the FC041 rule because the
          `execute` resource has been replaced by a `remote_file` resource.
        code: |
          # Do this instead
          remote_file '/tmp/testfile' do
            source 'http://www.example.org/'
          end
  - code: FC042
    name: Prefer include_recipe to require_recipe
    tags:
      - deprecated
      - correctness
    summary: |
      This warning is shown when `require_recipe` is used. Because
      `require_recipe` has been deprecated you should replace any references to
      to `require_recipe` with `include_recipe`.
    examples:
      - title: Use of deprecated require_recipe statement
        text: |
          This example matches the FC042 rule because the deprecated
          `require_recipe` statement is used.
        code: |
          # Don't do this
          require_recipe 'apache2::default'
      - title: Modified version
        text: |
          This modified example would not match the FC042 rule because the
          `require_recipe` statement has been replaced with `include_recipe`.
        code: |
          # Do this instead
          include_recipe 'apache2::default'
  - code: FC043
    name: Prefer new notification syntax
    tags:
      - correctness
      - notifications
      - deprecated
    summary: |
      This warning is shown when you use the old-style notification syntax. You
      should prefer the new-style notification syntax which has the advantage
      that you can notify resources that are defined later.
    examples:
      - title: Old notification syntax
        text: |
          This example matches the FC043 rule because it uses the older
          notification syntax.
        code: |
          # Don't do this
          template '/etc/www/configures-apache.conf' do
            notifies :restart, resources(:service => 'apache')
          end
      - title: Modified version
        text: |
          This modified example would not match the FC043 rule because the
          syntax of the notification has been updated to use the new format.
        code: |
          # Do this instead
          template '/etc/www/configures-apache.conf' do
            notifies :restart, 'service[apache]'
          end
  - code: FC044
    name: Avoid bare attribute keys
    tags:
      - style
    summary: |
      This warning is shown when, within a cookbook attributes file, you refer
      to an attribute as you would a local variable rather than as an attribute
      of the `node` object. It is valid to do the former, but you should prefer
      the later more explicit approach to accessing attributes because it is
      easier for users of your cookbooks to understand.
    examples:
      - title: Referring to an attribute within an attributes file
        text: |
          This example matches the FC044 rule because it refers to the
          `hostname` attribute as a bare attribute.
        code: |
          # Don't do this
          default['myhostname'] = hostname
      - title: Modified version
        text: |
          This modified example would not match the FC044 rule because the
          reference to the `hostname` attribute has been qualified so that
          the meaning is more apparent.
        code: |
          # Do this instead
          default['myhostname'] = node['hostname']
  - code: FC045
    name: Metadata does not contain cookbook name
    tags:
      - correctness
      - metadata
      - chef12
    summary: |
      This warning is shown when your cookbook does not define a name within
      the cookbook `metadata.rb` file. It's a good idea to specify a name in
      your cookbook metadata to avoid breakage if the name of the containing
      directory changes. Additionally, Chef 12 requires the name to be included
      in the metadata.rb file.
    examples:
      - title: Metadata without the name attribute
        text: |
          This example matches the FC045 because it lacks the name property
        code: |
          # Don't do this
          maintainer 'The Authors'
          maintainer_email 'you@example.com'
          license 'All Rights Reserved'
          description 'Installs/Configures test'
          long_description 'Installs/Configures test'
          version '0.1.0'
      - title: Modified version
        text: |
          This modified example would not match the FC045 because it contains the
          name property
        code: |
          # Do this instead
          name 'example'
          maintainer 'The Authors'
          maintainer_email 'you@example.com'
          license 'All Rights Reserved'
          description 'Installs/Configures test'
          long_description 'Installs/Configures test'
          version '0.1.0'
  - code: FC046
    name: Attribute assignment uses assign unless nil
    tags:
      - attributes
      - correctness
    summary: |
      It is a
      [common convention in Ruby development](http://www.rubyinside.com/what-rubys-double-pipe-or-equals-really-does-5488.html)
      to use `||=` to assign a value to variable if it is `false` or `nil`.
      Frequently developers with earlier exposure to Ruby attempt to use the
      same approach to assign a default value to node attributes within Chef.

      This doesn't work correctly because Chef auto-vivifies attributes so a
      missing attribute is never falsey.
    examples:
      - title: Using assign unless nil with node attributes
        text: |
          This example matches the FC046 rule because it uses assign unless nil
          (`||=`) with node attributes.
        code: |
          # Don't do this
          default['somevalue'] ||= []
      - title: Modified version
        text: |
          This modified example would not match the FC046 rule because the
          assign unless nil expression has been replaced with `default_unless`.
        code: |
          # Do this instead
          default_unless['somevalue'] = []
  - code: FC047
    name: Attribute assignment does not specify precedence
    tags:
      - attributes
      - correctness
      - chef11
    summary: |
      From Chef 11 it is no longer possible to set attributes without specifying
      their precedence level. For more information refer to the list of
      [Breaking Changes in Chef 11](https://docs.chef.io/breaking_changes_chef_11.html#implicit-writes-removed).
    examples:
      - title: Assign an attribute value without specifying precedence
        text: |
          This example matches the FC047 rule because it writes to the attribute
          without specifying the precedence level to set.

          This will work in Chef versions < 11 but you should prefer the new
          syntax.
        code: |
          # Don't do this
          node['foo'] = 'bar'
      - title: Modified version
        text: |
          This modified example would not match the FC047 rule because the
          attribute assignment has been updated to specify a precedence level
          of `normal`.
        code: |
          # Do this instead
          node.normal['foo'] = 'bar'
  - code: FC048
    name: Prefer Mixlib::ShellOut
    tags:
      - portability
    summary: |
      Normally to execute an operating system command with Chef you would use
      a built-in resource such as the `execute` resource.

      You might also have a need to spawn processes from Ruby, either inline
      or within a `ruby_block`. There are many different ways to do this in Ruby
      - my favourite reference is
      [Jesse Storimer's Working with Unix Processes](http://www.jstorimer.com/products/working-with-unix-processes).

      Chef comes with a library called
      [Mixlib::ShellOut](https://github.com/chef/mixlib-shellout) that
      provides a more convenient interface and it is idiomatic to use it rather
      than the backtick `` ` `` or `%x{}` syntaxes.
    examples:
      - title: Uses %x{} to shellout
        text: |
          This example matches the FC048 rule because it uses the `%x{}` sigil.
        code: |
          # Don't do this
          result = %x{some_command}
          raise 'Problem executing some_command' unless $?.success?
      - title: Modified version
        text: |
          This modified example would not match the FC048 rule because it is
          using the `Mixlib::ShellOut` library.
        code: |
          # Do this instead
          cmd = Mixlib::ShellOut.new('some_command')
          cmd.run_command
          cmd.error!
  - code: FC049
    name: Role name does not match containing file name
    tags:
      - style
      - roles
    summary: |
      This warning is shown if you declare a `name` in a
      [role file](https://docs.chef.io/essentials_roles.html#ruby-dsl)
      that does not match the containing file name. Using the same name for both
      is more consistent.
  - code: FC050
    name: Name includes invalid characters
    tags:
      - correctness
      - environments
      - roles
    summary: |
      This warning is shown if the name declared in a [role](https://docs.chef.io/essentials_roles.html#ruby-dsl)
      or [environment](https://docs.chef.io/essentials_environments.html#ruby-dsl)
      file contains characters that are not allowed.

      "[Names should be] made up of letters (upper-and lower-case), numbers, underscores, and hyphens:
      `[A-Z][a-z][0-9]` and `[_-]`. Spaces are not allowed."
    examples:
      - title: Name includes invalid characters
        text: |
          This example matches the FC050 rule because the name includes a space character.
        code: |
          # Don't do this
          name 'web server'
          run_list 'recipe[apache2]'
      - title: Modified version
        text: |
          This modified example would not match the FC050 rule because the space
          has been removed from the role name.
        code: |
          # Do this instead
          name 'webserver'
          run_list 'recipe[apache2]'
  - code: FC051
    name: Template partials loop indefinitely
    tags:
      - correctness
      - templates
    summary: |
      This warning is shown if a template uses template partials in a way that
      would cause an infinite loop. For example if two template partials both
      include each other.
  - code: FC052
    name: Metadata uses the deprecated "suggests" keyword
    tags:
      - style
      - deprecated
      - metadata
    summary: |
      This warning is shown if metadata.rb includes the suggests metadata. Suggests
      metadata was often used to inform users that a cookbook was required for
      a particular use case, but suggests itself was never implemented in chef-client.
      Adding suggests has no impact on the chef-client run and should be avoided.
    examples:
      - title: Metadata with the deprecated suggests keyword
        code: |
          # Don't do this
          name 'example'
          version '1.0.0'
          suggests 'windows'
      - title: Metadata instead using a depends keyword
        code: |
          # Do this instead
          name 'example'
          version '1.0.0'
          depends 'windows'
  - code: FC053
    name: Metadata uses the deprecated "recommends" keyword
    tags:
      - style
      - deprecated
      - metadata
    summary: |
      This warning is shown if metadata.rb includes the recommends metadata.
      Recommends metadata was often used to inform users that a cookbook was
      recommended for a particular use case, but recommends itself was never
      implemented in chef-client. Adding recommends has no impact on the
      chef-client run and should be avoided.
    examples:
      - title: Metadata with the deprecated recommends keyword
        code: |
          # Don't do this
          name 'example'
          version '1.0.0'
          recommends 'windows'
      - title: Metadata instead using a depends keyword
        code: |
          # Do this instead
          name 'example'
          version '1.0.0'
          depends 'windows'
  - code: FC055
    name: Ensure maintainer is set in metadata
    tags:
      - correctness
      - supermarket
      - metadata
    summary: |
      This warning is shown if the metadata does not include the maintainer
      keyword. Cookbooks should always contain maintainer information so users
      can determine the maintainer of the cookbook.
  - code: FC056
    name: Ensure maintainer_email is set in metadata
    tags:
      - correctness
      - supermarket
      - metadata
    summary: |
      This warning is shown if the metadata does not include the maintainer_email
      keyword. Cookbooks should always contain maintainer_email so users can
      contact the maintainer.
  - code: FC057
    name: Library provider does not declare use_inline_resources
    tags:
      - correctness
    summary: |
      This warning is shown if a library provider does not specify
      use_inline_resources. use_inline_resources executes provider resources in
      their own run context, outside the normal recipe run context. Doing so is
      considered best practice as it avoids issues with notifying when the
      provider resource is updated, and also avoids the need to uniquely name
      resources in the provider.
  - code: FC058
    name: Library provider declares use_inline_resources and declares action_<name> methods
    tags:
      - correctness
      - lwrp
    summary: |
      This warning is shown if a library provider includes use_inline_resources,
      but declares it's actions using action_<name> methods. The implemention of
      use_inline_resources requires that actions be declared using the action
      DSL method and not declared as normal ruby methods. Declaring actions as
      normal methods will break use_inline_resources. It also may produce
      unexpected behavior in some versions of Chef.
  - code: FC059
    name: LWRP provider does not declare use_inline_resources
    tags:
      - correctness
      - lwrp
    summary: |
      This warning is shown if a LWRP provider does not specify
      use_inline_resources. use_inline_resources executes provider resources in
      their own run context, outside the normal recipe run context. Doing so is
      considered best practice as it avoids issues with notifying when the
      provider resource is updated, and also avoids the need to uniquely name
      resources in the provider.
  - code: FC060
    name: LWRP provider declares use_inline_resources and declares \#action_<name> methods
    tags:
      - correctness
      - lwrp
    summary: |
      This warning is shown if a LWRP provider includes use_inline_resources,
      but declares it's actions using action_<name> methods. The implemention of
      use_inline_resources requires that actions be declared using the action
      DSL method and not declared as normal ruby methods. Declaring actions as
      normal methods will break use_inline_resources. It also may produce
      unexpected behavior in some versions of Chef.
  - code: FC061
    name: Valid cookbook versions are of the form x.y or x.y.z
    tags:
      - correctness
      - metadata
      - supermarket
    summary: |
      This warning is shown if a cookbook includes an invalid version string in
      the metadata file. Cookbooks that do not follow this format cannot be
      uploaded to the chef server.
    examples:
      - title: Metadata with incorrect version
        code: |
          # Don't do this
          name 'example'
          version '1.0.0.1'
          depends 'example'
      - title: Metadata with valid version
        code: |
          # Do this instead
          name 'example'
          version '1.0.1'
  - code: FC062
    name: Cookbook should have version metadata
    tags:
      - metadata
      - supermarket
    summary: |
      This warning is shown if a cookbook does not contain a version string in
      the metadata file. Without a version string cookbooks will be uploaded as
      version 0.0.0 each time. It is best practice to provide accurate versions
      that are incremented on each release, which requires specifying the string.
  - code: FC063
    name: Cookbook incorrectly depends on itself
    tags:
      - metadata
      - correctness
    summary: |
      This warning is shown if a cookbook depends on itself within its own metadata.
      Cookbooks need specify a dependency on other cookbooks which they rely on, but
      all recipes, resources and libraries within the cookbook itself are loaded and
      available so there is noneed for a self dependency.
    examples:
      - title: Metadata depending on itself
        code: |
          # Don't do this
          name 'example'
          version '1.0.0'
          depends 'example'
      - title: Modified metadata that doesn't depend on itself
        code: |
          # Do this instead
          name 'example'
          version '1.0.0'
  - code: FC064
    name: Ensure issues_url is set in metadata
    tags:
      - metadata
      - supermarket
      - chef12
    applies_to: '>= 12.0.0'
    summary: |
      This warning is shown if a cookbook does not include the issues_url property in
      its metadata file.  issues_url is used to point to the location for submitting issues
      (bugs) for the cookbook and is currently parsed by Supermarket to add links to community
      cookbooks. Note: issues_url is a Chef 12 only feature that will cause cookbook failures
      in Chef 11 so it should be properly gated if the code will be run on Chef 11 hosts.
    examples:
      - title: Metadata without issues_url
        code: |
          # Don't do this
          name 'example'
          version '1.0.0'
      - title: Modified version with Chef 11 compatibility check
        code: |
          # Do this instead
          name 'example'
          version '1.0.0'
          issues_url 'https://github.com/chef-cookbooks/something/issues' if respond_to?(:issues_url)
  - code: FC065
    name: Ensure source_url is set in metadata
    tags:
      - metadata
      - supermarket
      - chef12
    summary: |
      This warning is shown if a cookbook does not include the source_url property in
      its metadata file.  source_url is used to point to the source location for the
      cookbook and is currently parsed by Supermarket to add links to community cookbooks.
      Note: source_url is a Chef 12 only feature that will cause cookbook failures in Chef
      11 so it should be properly gated if the code will be run on Chef 11 hosts.
    examples:
      - title: Metadata without source_url
        code: |
          name 'example'
          version '1.0.0'
      - title: Modified version with Chef 11 compatibility check
        code: |
          name 'example'
          version '1.0.0'
          source_url 'https://github.com/chef-cookbooks/something' if respond_to?(:source_url)
  - code: FC066
    name: Ensure chef_version is set in metadata
    tags:
      - metadata
    summary: |
      This warning is shown if a cookbook does not include the chef_version property
      in its metadata file. chef_version is used to clearly specify chef version
      compatibility to users and to chef-client.
    examples:
      - title: Metadata without chef_version
        code: |
          name 'example'
          version '1.0.0'
      - title: Modified version with chef_version
        code: |
          name 'example'
          version '1.0.0'
          chef_version '>= 12.5' if respond_to?(:chef_version)
  - code: FC067
    name: Ensure at least one platform supported in metadata
    tags:
      - metadata
      - supermarket
    summary: |
      This warning is shown if a cookbook does not include any supports properties
      in its metadata file. supports is used to clearly specify platform support
      to users. Platform badges are added to cookbooks on Supermarket which allows
      users to search for specific platform supported cookbooks.
    examples:
      - title: Metadata without supports
        code: |
          name 'example'
          version '1.0.0'
      - title: Modified version with supports
        code: |
          name 'example'
          version '1.0.0'
          supports 'redhat'
  - code: FC068
    name: Ensure license is set in metadata
    tags:
      - metadata
      - supermarket
      - license
    summary: |
      This warning is shown if a cookbook does not include a license property
      in its metadata file. license is used to clearly specify how the cookbook
      can be used, modified, and shared to users and is displayed on Supermarket.
    examples:
      - title: Metadata without license
        code: |
          name 'example'
          version '1.0.0'
      - title: Modified version with license
        code: |
          name 'example'
          version '1.0.0'
          license 'Apache-2.0'
  - code: FC069
    name: Ensure standardized license defined in metadata
    tags:
      - metadata
      - supermarket
      - license
    summary: |
      This warning is shown if a cookbook does not use a standardized [SPDX.org](https://spdx.org/licenses/)
      defined license for the license property in its metadata file. Using a
      standardized license list enables users to identify valid compliant licenses.
    examples:
      - title: Metadata with non-standardized license
        code: |
          name 'example'
          version '1.0.0'
          license 'Apache 2.0'
      - title: Modified version with standardized license
        code: |
          name 'example'
          version '1.0.0'
          license 'Apache-2.0'
  - code: FC070
    name: Ensure supports metadata defines valid platforms
    tags:
      - metadata
      - supermarket
    summary: |
      This warning is shown if a cookbook uses an invalid platform for a supports property
      in its metadata file. Using a valid platform enables users to identify supported
      cookbooks and ensures that searching on Supermarket with platforms specified
      returns the supported cookbooks.
    examples:
      - title: Metadata with an invalid supports property
        code: |
          name 'example'
          version '1.0.0'
          supports 'rhel'
      - title: Modified version with valid supports property
        code: |
          name 'example'
          version '1.0.0'
          supports 'redhat'
  - code: FC071
    name: Missing LICENSE file
    tags:
      - style
      - license
    summary: |
      This warning is shown if a cookbook does not include a LICENSE file. A LICENSE
      file allows consumers of cookbooks to determine if the terms allow them to use,
      change or distribute a cookbook. The file is also parsed by many  many online
      services such as Github to provide addition functionality within their services.
  - code: FC072
    name: Metadata should not contain "attribute" keyword
    tags:
      - metadata
      - style
    summary: |
      This warning is shown if a cookbook defines its attributes in the metadata.rb file.
      Attributes defined in the metadata.rb file are not used by the chef-client or
      Supermarket and often become out of sync with the attributes files or readme.
      Documentation for attributes should instead be placed in the readme itself.
    examples:
      - title: Metadata with a deprecated attributes keyword
        code: |
          # Don't do this
          name 'example'
          version '1.0.0'
          attribute 'something',
            :display_name => 'Something',
            :description => 'Hash of Something attributes',
            :type => 'hash'
      - title: Metadata without a deprecated attributes keyword
        code: |
          # Do this instead
          name 'example'
          version '1.0.0'
  - code: FC073
    name: Root alias file shadowing non-alias file
    tags:
      - correctness
      - chef13
    applies_to: '>= 13.0.0'
    summary: |
      This warning is shown if a cookbook contains both a root alias and the target of the
      alias. Chef will ignore the non-alias file so it should be removed.
  - code: FC074
    name: LWRP should use DSL to define resource's default action
    tags:
      - correctness
      - lwrp
    summary: |
      Chef 11 introduced a new DSL method 'default_action' for LWRPs that allows
      defining the default action a LWRP should run if no action is specified.
      This method should be used instead of defining the default actoin through
      an initialize method in the resource.
    examples:
      - title: LWRP defining a default action through an initialize method
        code: |
          # Don't do this
          actions :add, :remove

          def initialize(*args)
            super
            @action = :add
          end
      - title: LWRP defining a default action through the DSL method
        code: |
          # Do this instead
          actions :add, :remove
          default_action :add
  - code: FC075
    name: Cookbook uses node.save to save partial node data to the chef-server mid-run
    tags:
      - correctness
    summary: |
      Chef provides a 'node.save' method, which allows saving the state of the
      node part way through a chef-client run. This is often used to ensure a run_list
      is saved or so that other state information is immediately available for search
      by other nodes in your environment. The use of node.save can be incredibly
      problematic and should be avoided as a run failure will still result in the
      node data being saved to the Chef server. If search is used to put nodes into
      production state this may result in non-functioning nodes being used.
  - code: FC076
    name: Metadata uses the deprecated "conflicts" keyword
    tags:
      - style
      - deprecated
      - metadata
    summary: |
      This warning is shown if metadata.rb includes the conflicts metadata. Conflicts
      metadata was often used to inform users of an incompatible cookbook that should
      not be used in conjunction with the current cookbook. Conflicts was never actually
      implemented in chef-client and its inclusion had no actual impact on the chef-client
      run.
    examples:
      - title: Metadata with the deprecated conflicts keyword
        code: |
          # Don't do this
          name 'example'
          version '1.0.0'
          conflicts 'foo'
      - title: Metadata without conflicts keyword
        code: |
          # Do this instead
          name 'example'
          version '1.0.0'
  - code: FC077
    name: Metadata uses the deprecated "replaces" keyword
    tags:
      - style
      - deprecated
      - metadata
    summary: |
      This warning is shown if metadata.rb includes the replaces metadata. Replaces
      metadata was often used to inform users of a previous cookbook that was replaced
      by the current cookbook. Replaces was never actually implemented in chef-client
      and its inclusion had no actual impact on the chef-client run.
    examples:
      - title: Metadata with the deprecated replaces keyword
        code: |
          # Don't do this
          name 'example'
          version '1.0.0'
          replaces 'foo'
      - title: Metadata without replaces keyword
        code: |
          # Do this instead
          name 'example'
          version '1.0.0'
  - code: FC078
    name: Ensure cookbook shared under an OSI-approved open source license
    tags:
      - opensource
      - license
      - supermarket
    summary: |
      This warning is shown if metadata.rb includes a cookbook license value that is not denoted
      as being an OSI approved open source license by [SPDX.org](https://spdx.org/licenses/).
  - code: FC079
    name: Deprecated easy_install_package resource usage
    tags:
      - deprecated
      - chef13
    summary: |
      This warning is shown if a cookbook uses the legacy easy_install_package resource. This
      resource was deprecated in Chef 12 and removed in Chef 13.
  - code: FC080
    name: User resource uses deprecated supports property
    tags:
      - deprecated
      - chef13
    summary: |
      This warning is shown if a user resource includes the supports property, which was deprecated
      in Chef 12 and removed in Chef 13. See the example below for properly specificing values
      previously in supports
    examples:
      - title: User resource using deprecated supports property
        code: |
          # Don't do this
          user 'betty' do
            action :create
            supports({
              manage_home: true,
              non_unique: true
            })
          end
      - title: Metadata properly specifying manage_home and non_unique
        code: |
          # Do this instead
          user 'betty' do
            action :create
            manage_home true
            non_unique true
          end
  - code: FC081
    name: Cookbook depends on the partial_search cookbook
    tags:
      - chef12
    summary: |
      This warning is shown if a cookbook metadata depends on the 'partial_search' cookbook. Chef
      12 included the partial search functionality in chef-client itself so this cookbook is no
      longer necessary. See the [Chef search filtering docs](https://docs.chef.io/chef_search.html#filter-search-results)
      for usage of the built in functionality.
  - code: FC082
    name: node.set or node.set_unless used to set node attributes
    tags:
      - deprecated
      - chef14
    summary: |
      This warning is shown if node.set or node.set_unless are used to set a value on the node.
      Both of these methods for setting attributes will be removed in Chef 14 as the
      names were confusing and particularly attractive to new users. These methods permanently
      set the attribute on the node even if the cookbook code is later removed, which is
      generally not what the user wants. If this functionality is in fact what you desire you
      should use node.normal or node.normal_unless, which are functionally equivalent. In general
      users should fully understand the implications of choosing a particular attribute level by
      reading the [Chef attributes type documentation](https://docs.chef.io/attributes.html#attribute-types).
    examples:
      - title: node.set used to set a node attribute value
        code: |
          # Don't do this
          node.set['foo']['bar'] = 'baz'
          node.set_unless['foo1']['bar1'] = 'baz1'

      - title: node.normal used to set a node attribute
        code: |
          # Do this instead if you actually want persistent attributes
          node.normal['foo']['bar'] = 'baz'
          node.normal_unless['foo1']['bar1'] = 'baz1'
  - code: FC083
    name: Execute resource using deprecated 'path' property
    tags:
      - deprecated
      - chef12
    summary: |
      This warning is shown if an execute resource includes the deprecated path property, which
      was removed in Chef 12. You should instead using the environment property to set the PATH
      variable.
    examples:
      - title: execute source with the path property
        code: |
          # Don't do this
          execute 'some_binary some_option' do
            path '/some/path/to/my/bin'
          end

      - title: execute resource with the environment property
        code: |
          # Do this instead
          execute 'some_binary some_option' do
            environment 'PATH' => '/some/path/to/my/bin'
          end
  - code: FC084
    name: Deprecated Chef::REST class used
    tags:
      - deprecated
      - chef13
    summary: |
      This warning is shown if the deprecated Chef::REST class used in a cookbook.
      Chef::REST has been replaced by Chef::ServerAPI. See [Chef Deprecation CHEF-9](https://docs.chef.io/deprecations_chef_rest.html)
  - code: FC085
    name: Resource using new_resource.updated_by_last_action to converge resource
    tags:
      - deprecated
      - chef13
    summary: |
      This warning is shown if a LWRP or Custom Resource uses new_resource.updated_by_last_action(true) to signal that a resource has been updated, and thus any necessary notification should fire. This method of controlling resource state was necessary with Chef 10 and earlier, however it is no longer required when writing resources. Additionally updated_by_last_action often leads to resources notifying on every Chef run, regardless of actual change. By utilizing use_inline_resources it is no longer necessary to manually control resource state when resources are comprised of built-in Chef resources such as execute, file, directory, etc. For resources comprised of non-Chef Ruby code, such as API calls or Mixlib::ShellOut calls, resource state should be controlled with the converge_by helper. Converge_by wraps code that would make a change to the node, allowing for why-run mode and providing a friendly log message on convergence.
    examples:
      - title: LWRP with all chef resources using new_resource.updated_by_last_action(true)
        code: |
          # Don't do this
          action :create do
            directory '/foo/bar' do
              action :create
            end

            new_resource.updated_by_last_action(true)
          end

      - title: LWRP with all chef resources using use_inline_resources
        code: |
          # Do this instead
          use_inline_resources

          action :create do
            directory '/foo/bar' do
              action :create
            end
          end

      - title: LWRP with custom ruby using new_resource.updated_by_last_action(true)
        code: |
          # Don't do this
          action :create do
            create_something_api_call

            new_resource.updated_by_last_action(true)
          end

      - title: LWRP with custom ruby using converge_by
        code: |
          # Do do this
          action :create do
            converge_by "create something" do
              create_something_api_call
            end
          end
  - code: FC086
    name: Use databag helper methods to load data bag items
    tags:
      - style
    summary: |
      This warning is shown if the data bag helper methods are not used to load data from a data bag. The data bag helpers are much simpler and also work for both encrypted and plain text data bags. See the [Chef Data Bag Docs](https://docs.chef.io/data_bags.html#use-data-bags) for additional usage details
    examples:
      - title: Accessing a data bag item without the helper
        code: |
          # Don't do this
          plain_text_data = Chef::DataBagItem.load('foo', 'bar')

          encrypted_data = Chef::EncryptedDataBagItem.load('foo2', 'bar2')

      - title: Accessing a data bag item using the helper
        code: |
          # Do do this
          plain_text_data = data_bag_item('foo', 'bar')

          encrypted_data = data_bag_item('foo2', 'bar2')
  - code: FC087
    name: Library maps provider with deprecated Chef::Platform.set
    tags:
      - deprecated
      - chef13
    summary: |
      This warning is shown if the deprecated Chef::Platform.set method is used to define the platforms a HWRP runs on. This method has been removed from Chef 13. To create resources that map to specific platforms you should instead consider using provides in a custom resource. See the [Chef Custom Resources Documention](https://docs.chef.io/custom_resources.html#provides) for additional details.
  - code: FC088
    name: Prefer Mixlib::Shellout over deprecated Chef::Mixin::Command
    tags:
      - deprecated
      - chef13
    summary: |
      This warning is shown if the deprecated Chef::Mixin::Command class is used to shell out within a recipe, library, or resource. This class has been removed in Chef 13 and Mixlib::Shellout should be used instead.
  - code: FC089
    name: Prefer Mixlib::Shellout over deprecated Chef::ShellOut
    tags:
      - deprecated
      - chef13
    summary: |
      This warning is shown if the deprecated Chef::ShellOut class is used to shell out within a recipe, library, or resource. This class has been removed in Chef 13 and Mixlib::ShellOut should be used instead.
    examples:
      - title: Using Chef::Shellout to Shellout
        code: |
          # Don't do this
          Chef::ShellOut.new('some_command').run_command
      - title: Mixlib::ShellOut version
        code: |
          # Do this instead
          Mixlib::ShellOut.new('some_command').run_command
  - code: FC091
    name: Use property not attribute in custom resources
    tags:
      - correctness
    summary: |
      This warning is shown if a custom resource defines attributes instead of properties. While Chef will do the right thing this may not always be the case and custom resources should be properly defined using properties.
    examples:
      - title: Defining attributes in a custom resource
        code: |
          # Don't do this
          attribute :source, String, name_attribute: true

          action :create do
            # some resource code here
          end
      - title: Defining properties in a custom resource
        code: |
          # Do this instead
          property :source, String, name_property: true

          action :create do
            # some resource code here
          end
  - code: FC092
    name: Custom resources should not declare actions
    tags:
      - correctness
    summary: |
      This warning is shown if a custom resource declare its actions instead of letting Chef determine the set of actions defined in the resource itself.
    examples:
      - title: Declaring actions in a custom resource
        code: |
          # Don't do this
          actions :create

          action :create do
            # some resource code here
          end
      - title: Not declaring actions in a custom resource
        code: |
          # Do this instead
          action :create do
            # some resource code here
          end
  - code: FC093
    name: Generated README text needs updating
    tags:
      - readme
      - supermarket
    summary: |
      This warning is shown if you used `chef generate cookbook` to create a new
      cookbook and didn't change boilerplate text in README file. You need to
      update it with real description.

      FC093 will match README files containing `TODO: Enter the cookbook description here.`

      * [https://docs.chef.io/ctl_chef.html#chef-generate-cookbook](https://docs.chef.io/ctl_chef.html#chef-generate-cookbook)
